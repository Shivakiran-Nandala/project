
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.ensemble import IsolationForest
from sklearn.svm import OneClassSVM
import os
from sklearn.neighbors import NearestNeighbors


# In[18]:


# Define the directory containing the Excel files
file_directory = r"C:\Users\shiva\Desktop\Project\SQL\Excel_file"

# Load Data

data_files = {
    "actor": "actor.xlsx",
    "address": "address.xlsx",
    "category": "category.xlsx",
    "city": "city.xlsx",
    "country": "country.xlsx",
    "customer": "customer.xlsx",
    "film": "film.xlsx",
    "film_actor": "film_actor.xlsx",
    "film_category": "film_category.xlsx",
    "inventory": "inventory.xlsx",
    "language": "language.xlsx",
    "payment": "payment.xlsx",
    "rental": "rental.xlsx",
    "staff": "staff.xlsx",
    "store": "store.xlsx"
}


# In[19]:


# Load all files into Pandas DataFrames
data = {name: pd.read_excel(os.path.join(file_directory, file)) for name, file in data_files.items()}

# Verify the loaded data
for key, df in data.items():
    print(f"Loaded {key}: {df.shape[0]} rows, {df.shape[1]} columns")


# In[20]:


# Exploratory Data Analysis (EDA)
plt.figure(figsize=(12,6))
sns.histplot(data['rental']['rental_date'].dt.month, bins=12, kde=True)
plt.title('Rental Trends Over Time')
plt.xlabel('Month')
plt.ylabel('Number of Rentals')
plt.show()


# In[21]:


# Customer Segmentation using K-Means
customer_data = data['payment'].groupby('customer_id').agg({'amount': 'sum', 'payment_id': 'count'})
customer_data.columns = ['total_spent', 'total_rentals']

kmeans = KMeans(n_clusters=3, random_state=42)
customer_data['cluster'] = kmeans.fit_predict(customer_data)


# In[22]:


plt.figure(figsize=(8,6))
sns.scatterplot(x='total_spent', y='total_rentals', hue='cluster', data=customer_data, palette='viridis')
plt.title('Customer Segmentation')
plt.xlabel('Total Spent')
plt.ylabel('Total Rentals')
plt.show()


# In[23]:


# Movie Recommendation using KNN
film_rentals = data['rental'].merge(data['inventory'], on='inventory_id').merge(data['film'], on='film_id')
customer_film_matrix = film_rentals.pivot_table(index='customer_id', columns='title', values='rental_id', aggfunc='count').fillna(0)

model_knn = NearestNeighbors(metric='cosine', algorithm='brute')
model_knn.fit(customer_film_matrix)


# In[24]:


def recommend_movie(movie_title, n_neighbors=5):
    movie_index = customer_film_matrix.columns.get_loc(movie_title)
    distances, indices = model_knn.kneighbors(customer_film_matrix.iloc[:, movie_index].values.reshape(1,-1), n_neighbors=n_neighbors)
    return [customer_film_matrix.columns[i] for i in indices.flatten()]


# In[25]:


# Predicting Customer Rental Behavior
X = customer_data[['total_spent', 'total_rentals']]
y = (customer_data['total_rentals'] > 5).astype(int)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model_rf = RandomForestClassifier(n_estimators=100, random_state=42)
model_rf.fit(X_train, y_train)
y_pred = model_rf.predict(X_test)
print("Customer Rental Prediction Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))


# In[26]:


# Anomaly Detection in Payments
iso_forest = IsolationForest(contamination=0.02, random_state=42)
customer_data['anomaly_score'] = iso_forest.fit_predict(customer_data[['total_spent', 'total_rentals']])
outliers = customer_data[customer_data['anomaly_score'] == -1]
print("Potential Fraudulent Transactions:")
print(outliers)


# In[27]:


# Store Performance Analysis
store_performance = data['payment'].merge(data['customer'], on='customer_id').merge(data['store'], on='store_id').groupby('store_id').agg({'amount': 'sum'})
plt.figure(figsize=(8,5))
sns.barplot(x=store_performance.index, y='amount', data=store_performance, palette='coolwarm')
plt.title('Store Revenue Comparison')
plt.xlabel('Store ID')
plt.ylabel('Total Revenue')
plt.show()

print("Project Completed Successfully!")


